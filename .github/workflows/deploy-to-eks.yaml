
name: Build and Push Docker Image

on:
  push:
    branches: [master, cicd-setup]
  pull_request:
    branches: [master]

env:
  DOCKER_USERNAME: morufajibikehub
  DOCKER_IMAGE_REPO: hostname
  DOCKER_IMAGE_DOCKERFILE_FOLDER: sample-apps/hostname

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2
        
      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} 

    #   # Build Docker image and push it to Docker Hub
    #   - name: Build and push Docker image
    #     run: |
    #       docker build -t ${DOCKER_USERNAME}/${{ env.DOCKER_IMAGE_REPO }}:v0.0.0 -f ${{ env.DOCKER_IMAGE_DOCKERFILE_FOLDER }}/Dockerfile ${{ env.DOCKER_IMAGE_DOCKERFILE_FOLDER }}
    #       docker push ${DOCKER_USERNAME}/${{ env.DOCKER_IMAGE_REPO }}:v1.0.0

          # Determine the new version tag
      - name: Get current tag
        id: get_tag
        run: |
          # Get the latest tag from Git
          TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $TAG"

          # Extract version numbers
          VERSION=$(echo $TAG | cut -c 2-) # Remove the "v" prefix
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment the PATCH version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "New tag: $NEW_TAG"

          # Output the new tag
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO }}:${{ env.NEW_TAG }} -f ${{ env.DOCKER_IMAGE_DOCKERFILE_FOLDER }}/Dockerfile ${{ env.DOCKER_IMAGE_DOCKERFILE_FOLDER }}
          docker tag ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO }}:${{ env.NEW_TAG }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO }}:latest

      # Push the Docker image
      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO }}:${{ env.NEW_TAG }}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO }}:latest

      # Create and push a Git tag after building the Docker image
      - name: Create and push Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create a new tag based on the Docker image version
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}

    # # add a step to update the image in the Kubernetes manifest file
    #   - name: Update Kubernetes manifest file
    #     run: |
    #       sed -i 's|image: .*$|image: ${DOCKER_USERNAME}/${{ env.DOCKER_IMAGE_REPO }}:latest|' argocd-cicd-setup/kubernetes/manifest.yaml

    # # add another step to commit and push the changes to the repository
    #   - name: Commit and push changes
    #     run: |
    #       git config --global user.email "auto-commit@github.com"
    #       git config --global user.name "GitHub Actions"
    #       git add argocd-cicd-setup/kubernetes/manifest.yaml
    #       git commit -m "Update image in Kubernetes manifest file"
    #       git push
    